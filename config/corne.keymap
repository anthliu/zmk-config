#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

// Layer Definitions
#define BASE 0
#define GAMING 1
#define LAYERS 2
#define NAV 3
#define MOUSE 4
#define MEDIA 5
#define NUM 6
#define SYM 7
#define FN 8

// based on the Miryoku layout by Manna Harbour and jasoneliu's keymap file.

#define U_STRINGIFY(x) #x
#define U_MACRO(name,...) \
/ { \
  macros { \
    name: name { \
      label = U_STRINGIFY(ZM_ ## name); \
      compatible = "zmk,behavior-macro"; \
      #binding-cells = <0>; \
      __VA_ARGS__ \
    }; \
  }; \
};

#define SHIFT_FUNC(NAME, BINDING, SHIFT_BINDING) \
/ { \
  behaviors { \
    NAME: NAME { \
      compatible = "zmk,behavior-mod-morph"; \
      label = U_STRINGIFY(NAME); \
      #binding-cells = <0>; \
      bindings = <BINDING>, <SHIFT_BINDING>; \
      mods = <(MOD_LSFT|MOD_RSFT)>; \
    }; \
  }; \
};

#define SHIFT_MACRO(NAME, BINDING, SHIFT_BINDING) \
U_MACRO(u_macro_ ## NAME, wait-ms = <0>; bindings = <SHIFT_BINDING>;) \
SHIFT_FUNC(NAME, BINDING, &u_macro_ ## NAME)

// Behavior configuration
&mt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};
&lt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};
&sk {
    release-after-ms = <500>;
    quick-release;
};
#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS 36 37 38 39 40 41
/ {
    behaviors {
        hml: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_MOD_L";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        hmr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_MOD_R";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };
};

// mouse speed adjustments from krissen
#define U_MOUSE_MOVE_MAX 1400                     /* <--- New max speed setting (default: 600) */
#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)

&mmv {
    time-to-max-speed-ms = <400>;             /* <--- How long time until max speed is reached (default: 500) */
};

// Keymap configuration
/ {
    keymap {
        compatible = "zmk,keymap";

        base {
// -----------------------------------------------------------------------------------------------------------------------------
// |        |   Q    |   W    |     E     |     R     |     T     | # |     Y     |     U    |    I    |    O   |   P      |     |
// |        | A/LGUI | S/LALT |  D/LCTRL  |  F/LSHFT  |     G     | # |     H     | J/LSHFT  | K/LCTRR | L/LALT | '/LGUI   |     |
// |        |   Z    | X/RALT |     C     |     V     |     B     | # |     N     |     M    |    ,    | ./RALT | //Layers |     |
//                            | ESC/MEDIA | SPACE/NAV | TAB/MOUSE | # | ENTER/SYM | BSPC/NUM | DEL/FN  |

            label = "Base";
            bindings = <
&trans      &kp Q       &kp W       &kp E          &kp R          &kp T                &kp Y          &kp U         &kp I          &kp O         &kp P           &trans
&trans      &hml LGUI A &hml LALT S &hml LCTRL D   &mt LSHFT F    &kp G                &kp H          &mt LSHFT J   &hmr LCTRL K   &hmr LALT L   &hmr LGUI SQT   &trans
&trans      &kp Z       &mt RALT X  &kp C          &kp V          &kp B                &kp N          &kp M         &kp CMMA       &mt RALT DOT  &lt LAYERS FSLH &trans
                                    &lt MEDIA ESC  &lt NAV SPACE  &lt MOUSE TAB        &lt SYM ENTER  &lt NUM BSPC  &lt FN DEL
            >;
        };

        gaming {
// ----------------------------------------------------------------------------------------------------
// |        | LCTRL |   1   |   2   |   3   |   4   | # |     Y     |     U    |    I    |    O   |   P      |     |
// |        | SHIFT |   Q   |   W   |   E   |   R   | # |     H     | J/LSHFT  | K/LCTRR | L/LALT | '/LGUI   |     |
// |        | LALT  |   A   |   S   |   D   |   F   | # |     N     |     M    |    ,    | ./RALT | //Layers |     |
//                          |  ESC  | SPACE |  TAB  | # | ENTER | BSPC  |  DEL  |

            label = "Gaming";
            bindings = <
&trans      &kp LCTRL  &kp N1 &kp N2   &kp N3     &kp N4         &kp Y          &kp U         &kp I          &kp O         &kp P           &trans
&trans      &kp SHIFT  &kp Q  &kp W    &kp E      &kp R          &kp H          &mt LSHFT J   &hmr LCTRL K   &hmr LALT L   &hmr LGUI SQT   &trans
&trans      &kp LALT   &kp A  &kp S    &kp D      &kp F          &kp N          &kp M         &kp CMMA       &mt RALT DOT  &lt LAYERS FSLH &trans
                      &kp ESC  &kp SPACE  &kp TAB        &kp ENTER  &kp BSPC  &kp DEL
            >;
        };

        layers {
// ---------------------------------------------------------------------------------------------
// |      |     |     |        |      |     | # |     |      |         |        |      |      |
// |      |     |     | GAMING | BASE |     | # |     |      |         |        |      |      |
// |      |     |     |        |      |     | # |     |      |         |        | HELD |      |
//                    |        |      |     | # |     |      |         |

            label = "BLayers";
            bindings = <
&trans  &trans  &trans  &trans     &trans   &trans        &trans  &trans   &trans       &trans      &trans  &trans
&trans  &trans  &trans  &to GAMING &to BASE &trans        &trans  &trans   &trans       &trans      &trans  &trans
&trans  &trans  &trans  &trans     &trans   &trans        &trans  &trans   &trans       &trans      &trans  &trans
                        &trans     &trans   &trans        &trans  &trans   &trans
            >;
        };


        navigation {
// -------------------------------------------------------------------------------------------
// |     |      |      |       |       |     | # | REDO  | CUT  | COPY | PASTE | UNDO  |     |
// |     | LGUI | LALT | LCTRL | LSHFT |     | # | LEFT | DOWN | UP    | RIGHT | CAPSW |     |
// |     |      | RALT |       |       |     | # | HOME | PGDN | PGUP  | END   | INS   |     |
//                     |       | HELD  |     | # | ENTER | BSPC | DEL  |

            label = "Nav";
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &kp K_REDO    &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_UNDO   &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &kp LEFT      &kp DOWN   &kp UP      &kp RIGHT    &caps_word   &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans        &kp HOME      &kp PG_DN  &kp PG_UP   &kp END      &kp INS      &trans
                            &trans     &trans     &trans        &kp ENTER     &kp BSPC   &kp DEL
            >;
        };

        mouse {
// ------------------------------------------------------------------------------------
// |     |      |      |       |       |      | # |     |     |     |     |     |     |
// |     | LGUI | LALT | LCTRL | LSHFT |      | # |     |     |     |     |     |     |
// |     |      | RALT |       |       |      | # |     |     |     |     |     |     |
//                     |       |       | HELD | # |     |     |     |

            label = "Mouse";
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &trans           &trans           &trans         &trans            &trans  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &mmv MOVE_LEFT   &mmv MOVE_DOWN   &mmv MOVE_UP   &mmv MOVE_RIGHT   &trans  &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans        &mwh SCROLL_LEFT &mwh SCROLL_DOWN &mwh SCROLL_UP &mwh SCROLL_RIGHT &trans  &trans
                            &trans     &trans     &trans        &mkp RCLK &mkp LCLK &mkp MCLK
            >;
        };

        media {
// -----------------------------------------------------------------------------------------------------
// |     |      |      |       |       |      | # | RGB_TOG  |        | BR_D   | BR_U   | EP_ON  |     |
// |     | LGUI | LALT | LCTRL | LSHFT |      | # | EP_TOG   | PREV   | VOL_D  | VOL_U  | NEXT   |     |
// |     |      | RALT |       |       |      | # | OUT_TOG  | BT_0   | BT_1   | BT_2   | BT_3   |     |
//                     | HELD  |       |      | # | STOP     | PLAY/P | MUTE   |
            label = "Media";
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &bootloader       &trans        &cp C_BRI_DN  &cp C_BRI_UP  &ext_power EP_ON  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &ext_power EP_TOG &cp C_PREV    &cp C_VOL_DN  &cp C_VOL_UP  &cp C_NEXT        &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans        &out OUT_TOG      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &trans
                            &trans     &trans     &trans        &cp C_STOP        &cp C_PP      &cp C_MUTE
            >;
        };

        numbers {
// -----------------------------------------------------------------------------------
// |     |  [  |  7  |  8  |  9  |  ]  | # |     |       |       |      |      |     |
// |     |  ;  |  4  |  5  |  6  |  =  | # |     | LSHFT | LCTRL | LALT | LGUI |     |
// |     |  `  |  1  |  2  |  3  |  \  | # |     |       |       | RALT |      |     |
//                   |  .  |  0  |  -  | # |     | HELD  |       |

            label = "Num";
            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT         &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp SEMI   &kp N4  &kp N5   &kp N6  &kp EQUAL        &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH         &trans  &trans     &trans     &kp RALT  &trans    &trans
                           &kp DOT  &kp N0  &kp MINUS        &trans  &trans     &trans
            >;
        };

        symbols {
// ------------------------------------------------------------------------------------
// |     |  {  |  &  |  *  |  (  |  }  | # |      |       |       |      |      |     |
// |     |  :  |  $  |  %  |  ^  |  +  | # |      | LSHFT | LCTRL | LALT | LGUI |     |
// |     |  ~  |  !  |  @  |  #  |  |  | # |      |       |       | RALT |      |     |
//                   |  (  |  )  |  _  | # | HELD |       |       |

            label = "Symb";
            bindings = <
&trans  &kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC              &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp COLON  &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS              &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE              &trans  &trans     &trans     &kp RALT  &trans    &trans
                             &kp LPAR   &kp RPAR   &kp UNDERSCORE        &trans  &trans     &trans
            >;
        };

        function {
// ------------------------------------------------------------------------------------------
// |     |  F12 |  F7  |  F8  |  F9   | PSCRN | # |     |       |       |      |      |     |
// |     |  F11 |  F4  |  F5  |  F6   | SLCK  | # |     | LSHFT | LCTRL | LALT | LGUI |     |
// |     |  F10 |  F1  |  F2  |  F3   | PAUSE | # |     |       |       | RALT |      |     |
//                     | ESC  | SPACE |  TAB  | # |     |       | HELD  |

            label = "Func";
            bindings = <
&trans  &kp F12  &kp F7  &kp F8   &kp F9     &kp PSCRN              &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5   &kp F6     &kp SLCK               &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp F10  &kp F1  &kp F2   &kp F3     &kp PAUSE_BREAK        &trans  &trans     &trans     &kp RALT  &trans    &trans
                         &kp ESC  &kp SPACE  &kp TAB                &trans  &trans     &trans
            >;
        };
    };
};

SHIFT_MACRO(u_bt_sel_0, &bt BT_SEL 0, &bt BT_SEL 0 &bt BT_CLR)
SHIFT_MACRO(u_bt_sel_1, &bt BT_SEL 1, &bt BT_SEL 1 &bt BT_CLR)
SHIFT_MACRO(u_bt_sel_2, &bt BT_SEL 2, &bt BT_SEL 2 &bt BT_CLR)
SHIFT_MACRO(u_bt_sel_3, &bt BT_SEL 3, &bt BT_SEL 3 &bt BT_CLR)
SHIFT_MACRO(u_bt_sel_4, &bt BT_SEL 4, &bt BT_SEL 4 &bt BT_CLR)

SHIFT_FUNC(u_out_tog, &out OUT_TOG, &out OUT_USB)
SHIFT_FUNC(u_caps_word, &caps_word, &kp CAPS)
