#include <behaviors.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

// Layer Definitions
#define QWERTY 0
#define CANARY 1
#define MIRROR 2
#define GAMING 3
#define GLIT 4
#define LAYERS 5
#define NAV 6
#define MOUSE 7
#define MEDIA 8
#define NUM 9
#define SYM 10
#define FN 11

// based on the Miryoku layout by Manna Harbour and jasoneliu's keymap file.

#define U_STRINGIFY(x) #x
#define U_MACRO(name,...) \
/ { \
  macros { \
    name: name { \
      label = U_STRINGIFY(ZM_ ## name); \
      compatible = "zmk,behavior-macro"; \
      #binding-cells = <0>; \
      __VA_ARGS__ \
    }; \
  }; \
};

#define SHIFT_FUNC(NAME, BINDING, SHIFT_BINDING) \
/ { \
  behaviors { \
    NAME: NAME { \
      compatible = "zmk,behavior-mod-morph"; \
      label = U_STRINGIFY(NAME); \
      #binding-cells = <0>; \
      bindings = <BINDING>, <SHIFT_BINDING>; \
      mods = <(MOD_LSFT|MOD_RSFT)>; \
    }; \
  }; \
};

#define SHIFT_MACRO(NAME, BINDING, SHIFT_BINDING) \
U_MACRO(u_macro_ ## NAME, wait-ms = <0>; bindings = <SHIFT_BINDING>;) \
SHIFT_FUNC(NAME, BINDING, &u_macro_ ## NAME)

#define SHIFT_MACRO_KP(NAME, BINDING, SHIFT_BINDING) \
U_MACRO(u_macro_ ## NAME, wait-ms = <30>; tap-ms = <30>; bindings = <SHIFT_BINDING>;) \
SHIFT_FUNC(NAME, BINDING, &u_macro_ ## NAME)

// Behavior configuration
&mt {
    tapping-term-ms = <150>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};
&lt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};
&sk {
    release-after-ms = <500>;
    quick-release;
};
#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS 36 37 38 39 40 41
/ {
    behaviors {
        hml: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_MOD_L";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        hmr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_MOD_R";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };
};

// mouse speed adjustments from krissen
#define U_MOUSE_MOVE_MAX 1200                     /* <--- New max speed setting (default: 600) */
#define U_MOUSE_P_MOVE_MAX 500                     /* <--- Precise max speed setting */
#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_X(U_MOUSE_MOVE_MAX)
#define MOVE_UP_P MOVE_Y(-U_MOUSE_P_MOVE_MAX)
#define MOVE_DOWN_P MOVE_Y(U_MOUSE_P_MOVE_MAX)
#define MOVE_LEFT_P MOVE_X(-U_MOUSE_P_MOVE_MAX)
#define MOVE_RIGHT_P MOVE_X(U_MOUSE_P_MOVE_MAX)

&mmv {
    acceleration-exponent = <1>;      // 1
    time-to-max-speed-ms = <300>;    // 500
    delay-ms = <0>;                   // 0
};

&msc {
    acceleration-exponent = <1>;      // 1
    time-to-max-speed-ms = <40>;      // 40
    delay-ms = <0>;                   // 10
};

// custom macros
SHIFT_MACRO(u_bt_sel_0, &bt BT_SEL 0, &bt BT_SEL 0 &bt BT_CLR)
SHIFT_MACRO(u_bt_sel_1, &bt BT_SEL 1, &bt BT_SEL 1 &bt BT_CLR)
SHIFT_MACRO(u_bt_sel_2, &bt BT_SEL 2, &bt BT_SEL 2 &bt BT_CLR)
SHIFT_MACRO(u_bt_sel_3, &bt BT_SEL 3, &bt BT_SEL 3 &bt BT_CLR)
SHIFT_MACRO(u_bt_sel_4, &bt BT_SEL 4, &bt BT_SEL 4 &bt BT_CLR)

SHIFT_FUNC(u_out_tog, &out OUT_TOG, &out OUT_USB)
SHIFT_FUNC(u_caps_word, &caps_word, &kp CAPS)

SHIFT_FUNC(u_mmv_up, &mmv MOVE_UP, &mmv MOVE_UP_P)
SHIFT_FUNC(u_mmv_down, &mmv MOVE_DOWN, &mmv MOVE_DOWN_P)
SHIFT_FUNC(u_mmv_left, &mmv MOVE_LEFT, &mmv MOVE_LEFT_P)
SHIFT_FUNC(u_mmv_right, &mmv MOVE_RIGHT, &mmv MOVE_RIGHT_P)

SHIFT_MACRO_KP(u_nav_lt, &kp LEFT, &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT)
SHIFT_MACRO_KP(u_nav_rt, &kp RIGHT, &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT)
SHIFT_MACRO_KP(u_nav_up, &kp UP, &kp UP &kp UP &kp UP &kp UP &kp UP)
SHIFT_MACRO_KP(u_nav_dn, &kp DOWN, &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN)

SHIFT_FUNC(u_dot_par, &kp DOT, &kp LPAR)
SHIFT_FUNC(u_nine_space, &kp N9, &kp SPACE)

// Keymap configuration
/ {
    keymap {
        compatible = "zmk,keymap";

        qwerty {
// -----------------------------------------------------------------------------------------------------------------------------
// |        |   Q    |   W    |     E     |     R     |     T     | # |     Y     |     U    |    I    |    O   |   P      |     |
// |        | A/LGUI | S/LALT |  D/LCTRL  |  F/LSHFT  |     G     | # |     H     | J/LSHFT  | K/LCTRR | L/LALT | '/LGUI   |     |
// |        |   Z    | X/RALT |     C     |     V     |     B     | # |     N     |     M    |    ,    | ./RALT | //Layers |     |
//                            | ESC/MEDIA | TAB/MOUSE | SPACE/NAV | # | ENTER/SYM | BSPC/NUM | DEL/FN  |

            label = "QWERTY";
            bindings = <
&trans      &kp Q        &kp W       &kp E          &kp R          &kp T                &kp Y          &kp U         &kp I          &kp O         &kp P           &trans
&trans      &hml LGUI A  &hml LALT S &hml LCTRL D   &mt LSHFT F    &kp G                &kp H          &mt LSHFT J   &hmr LCTRL K   &hmr LALT L   &hmr LGUI SQT   &trans
&trans      &lt MIRROR Z &hml RALT X &kp C          &kp V          &kp B                &kp N          &kp M         &kp CMMA       &hmr RALT DOT &lt LAYERS FSLH &trans
                                     &lt MEDIA ESC  &lt MOUSE TAB  &lt NAV SPACE        &lt SYM ENTER  &lt NUM BSPC  &lt FN DEL
            >;
        };

        canary {
// -----------------------------------------------------------------------------------------------------------------------------
// |        |   W    |   L    |     Y     |     P     |     B     | # |     Z     |    F     |    O    |    U   |   '    |     |
// | LAYERS | C/LGUI | R/LALT |  S/LCTRL  |  T/LSHFT  |     G     | # |     M     | N/LSHFT  | E/LCTRL | I/LALT | A/LGUI |     |
// |        |   Q    | J/RALT |     V     |     D     |     K     | # |     X     |    H     |    /    | ,/RALT | ./Layer|     |
//                            | ESC/MEDIA | SPACE/NAV | TAB/MOUSE | # | ENTER/SYM | BSPC/NUM | DEL/FN  |
            label = "CANARY";
            bindings = <
&trans      &kp W       &kp L       &kp Y          &kp P          &kp B                &kp Z          &kp F         &kp O          &kp U          &kp SQT         &trans
&trans      &hml LGUI C &hml LALT R &hml LCTRL S   &mt LSHFT T    &kp G                &kp M          &mt LSHFT N   &hmr LCTRL E   &hmr LALT I    &hmr LGUI A     &trans
&trans      &kp Q       &hml RALT J &kp V          &kp D          &kp K                &kp X          &kp H         &kp CMMA       &hmr RALT DOT  &lt LAYERS FSLH &trans
                                    &lt MEDIA ESC  &lt MOUSE TAB  &lt NAV SPACE        &lt SYM ENTER  &lt NUM BSPC  &lt FN DEL
            >;
        };

        mirror {
// -----------------------------------------------------------------------------------------------------------------------------
// |        |   P    |   O    |     I     |     U     |     Y     | # |     Y     |     U    |    I    |    O   |   P      |     |
// |        | '/LGUI | L/LALT |  K/LCTRL  |  J/LSHFT  |     H     | # |     H     | J/LSHFT  | K/LCTRR | L/LALT | '/LGUI   |     |
// |        | HELD   | ./RALT |     ,     |     M     |     N     | # |     N     |     M    |    ,    | ./RALT | //Layers |     |
//                            | DEL/FN    | BSPC/NUM  | ENTER/SYM | # | ENTER/SYM | BSPC/NUM | DEL/FN  |

            label = "MIRROR";
            bindings = <
&trans      &kp P         &kp O         &kp I          &kp U          &kp Y            &trans         &trans        &trans         &trans        &trans          &trans
&trans      &hml LGUI SQT &hml LALT L   &hml LCTRL K   &mt LSHFT J    &kp H            &trans         &trans        &trans         &trans        &trans          &trans
&trans      &trans        &hml RALT DOT &kp CMMA       &kp M          &kp N            &trans         &trans        &trans         &trans        &trans          &trans
                                    &lt FN DEL         &lt NUM BSPC   &lt SYM ENTER    &trans         &trans        &trans
            >;
        };


        gaming {
// ----------------------------------------------------------------------------------------------------
// |        | ESC   |   1   |   2   |   3   |   4   | # |     Y     |     U    |    I    |    O   |   P      |     |
// |        | TAB   |   Q   |   W   |   E   |   R   | # |     H     | J/LSHFT  | K/LCTRR | L/LALT | '/LGUI   |     |
// |        | SHIFT |   A   |   S   |   D   |   F   | # |     N     |     M    |    ,    | ./RALT | //Layers |     |
//                          |  CTRL | g-lit | SPACE | # | ENTER | BSPC  |  DEL  |

            label = "Gaming";
            bindings = <
&trans      &kp TAB    &kp N1 &kp N2   &kp N3     &kp N4         &kp Y          &kp U         &kp I          &kp O         &kp P           &trans
&trans      &kp LCTRL  &kp Q  &kp W    &kp E      &kp R          &kp H          &mt LSHFT J   &hmr LCTRL K   &hmr LALT L   &hmr LGUI SQT   &trans
&trans      &kp LALT   &kp A  &kp S    &kp D      &kp F          &kp N          &kp M         &kp CMMA       &mt RALT DOT  &lt LAYERS FSLH &trans
                      &kp LSHFT &mo GLIT  &kp SPACE       &kp ENTER  &kp BSPC  &kp DEL
            >;
        };

        glit {
// -----------------------------------------------------------------------------------------------------------------------------
// |        | ESC    |   I    |     O     |     P     |     T     | # |     Y     |     U    |    I    |    O   |   P      |     |
// |        | TILDE  |   H    |     M     |     F     |     G     | # |     H     |     J    |    K    |    L   |   '      |     |
// |        |   Z    |   X    |     C     |     V     |     B     | # |     N     |     M    |    ,    |    .   |   /      |     |
//                            |           |  HELD     |           | # |           |          |         |

            label = "G-Literals";
            bindings = <
&trans      &kp Q        &kp W       &kp E          &kp R          &kp T                &kp Y          &kp U         &kp I          &kp O         &kp P           &trans
&trans      &kp A        &kp S       &kp D          &kp F          &kp G                &kp H          &kp J         &kp K          &kp L         &kp SQT         &trans
&trans      &kp Z        &kp X       &kp C          &kp V          &kp B                &kp N          &kp M         &kp CMMA       &kp DOT       &kp FSLH        &trans
                                     &trans         &trans         &trans               &trans         &trans        &trans
            >;
        };

        layers {
// ---------------------------------------------------------------------------------------------
// |      |     |     |        | CANARY  |     | # |     |      |         |        |      |      |
// |      |     |     | GAMING | QWERTY  |     | # |     |      |         |        |      |      |
// |      |     |     |        |         |     | # |     |      |         |        | HELD |      |
//                    |        |         |     | # |     |      |         |

            label = "BLayers";
            bindings = <
&trans  &trans  &trans  &trans     &to CANARY  &trans        &trans    &trans   &trans       &trans      &trans  &trans
&trans  &trans  &trans  &to GAMING &to QWERTY  &trans        &trans    &trans   &trans       &trans      &trans  &trans
&trans  &trans  &trans  &trans     &trans      &trans        &trans    &trans   &trans       &trans      &trans  &trans
                        &trans     &trans      &trans        &to SYM   &to NUM  &to FN
            >;
        };


        navigation {
// --------------------------------------------------------------------------------------------
// |     |      | LEFT | UP    | DOWN  | RT   | # | REDO  | CUT  | COPY | PASTE | UNDO  |     |
// |     | LGUI | LALT | LCTRL | LSHFT | REPT | # | LEFT | DOWN | UP    | RIGHT | CAPSW |     |
// |     | UNDO | CUT  | COPY  | PASTE | BOLD | # | HOME | PGDN | PGUP  | END   | INS   |     |
//                     |       |       | HELD | # | ENTER | BSPC | DEL  |

            label = "Nav";
            bindings = <
&trans  &trans    &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT     &kp K_REDO    &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_UNDO   &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &key_repeat   &u_nav_lt     &u_nav_dn  &u_nav_up   &u_nav_rt    &u_caps_word &trans
&trans  &kp LC(Z) &kp LC(X) &kp LC(C)  &kp LC(V)  &kp LC(B)     &kp HOME      &kp PG_DN  &kp PG_UP   &kp END      &kp INS      &trans
                            &trans     &trans     &trans        &kp ENTER     &kp BSPC   &kp DEL
            >;
        };

        mouse {
// ------------------------------------------------------------------------------------
// |     |      | LEFT | UP    | DOWN  | RT   | # | REDO | CUT  | COPY | PASTE | UNDO |     |
// |     | LGUI | LALT | LCTRL | LSHFT |      | # |      | SCDN | UP   | SCUP  |      |     |
// |     | UNDO | CUT  | COPY  | PASTE | BOLD | # | SCLFT| LEFT | DOWN | RIGHT | SCRT |     |
//                     |       | HELD  |      | # | LCLK | RCLK | MCLK |

            label = "Mouse";
            bindings = <
&trans  &trans    &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT     &kp K_REDO     &kp K_CUT      &kp K_COPY     &kp K_PASTE   &kp K_UNDO      &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &trans         &msc SCRL_DOWN &u_mmv_up      &msc SCRL_UP  &trans          &trans
&trans  &kp LG(Z) &kp LG(X) &kp LG(C)  &kp LG(V)  &kp LG(B)     &msc SCRL_LEFT &u_mmv_left    &u_mmv_down    &u_mmv_right  &msc SCRL_RIGHT &trans
                            &trans     &trans     &trans        &mkp LCLK &mkp RCLK &mkp MCLK
            >;
        };

        media {
// -----------------------------------------------------------------------------------------------------
// |     |      |      |       |       |      | # | BOOT     | OUT_TOG| BR_D   | BR_U   | EP_TOG |     |
// |     | LGUI | LALT | LCTRL | LSHFT |      | # | PREV     | VOL_D  | VOL_U  | NEXT   |        |
// |     |      | RALT |       |       |      | # | BT_0     | BT_1   | BT_2   | BT_3   | BT_4   |
//                     | HELD  |       |      | # | STOP     | PLAY/P | MUTE   |
            label = "Media";
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &bootloader       &u_out_tog    &cp C_BRI_DN  &cp C_BRI_UP  &ext_power EP_TOG &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &cp C_PREV        &cp C_VOL_DN  &cp C_VOL_UP  &cp C_NEXT    &trans            &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans        &u_bt_sel_0       &u_bt_sel_1   &u_bt_sel_2   &u_bt_sel_3   &u_bt_sel_4       &trans
                            &trans     &trans     &trans        &cp C_STOP        &cp C_PP      &cp C_MUTE
            >;
        };

        numbers {
// -----------------------------------------------------------------------------------
// |     |  [  |  7  |  8  |  9  |  ]  | # |       |           |            |          |      |     |
// |     |  ;  |  4  |  5  |  6  |  =  | # | REPEA | SPC/LSHFT | BSPC/LCTRL | DEL/LALT | LGUI |     |
// |     |  `  |  1  |  2  |  3  |  \  | # |       |           |            | RALT     |      |     |
//                   |  .  |  0  |  -  | # |       | HELD      |            |

            label = "Num";
            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8     &u_nine_space &kp RBKT         &trans      &trans          &trans         &trans       &trans     &trans
&trans  &kp SEMI   &kp N4  &kp N5     &kp N6        &kp EQUAL        &key_repeat &mt LSHFT SPACE &mt LCTRL BSPC &mt LALT DEL &kp LGUI   &trans
&trans  &kp GRAVE  &kp N1  &kp N2     &kp N3        &kp BSLH         &trans      &trans          &trans         &kp RALT     &to QWERTY &trans
                           &u_dot_par &kp N0        &kp MINUS        &trans  &trans     &trans
            >;
        };

        symbols {
// ------------------------------------------------------------------------------------
// |     |  {  |  &  |  *  | SPACE |  }  | # |       |           |            |          |      |     |
// |     |  :  |  $  |  %  |  ^    |  +  | # | REPEA | SPC/LSHFT | BSPC/LCTRL | DEL/LALT | LGUI |     |
// |     |  ~  |  !  |  @  |  #    |  |  | # |       |           |            | RALT     |      |     |
//                   |  (  |  )    |  _  | # | HELD  |           |            |

            label = "Symb";
            bindings = <
&trans  &kp LBRC   &kp AMPS  &kp ASTRK  &kp SPACE  &kp RBRC              &trans      &trans          &trans         &trans       &trans     &trans
&trans  &kp COLON  &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS              &key_repeat &mt LSHFT SPACE &mt LCTRL BSPC &mt LALT DEL &kp LGUI   &trans
&trans  &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE              &trans      &trans          &trans         &kp RALT     &to QWERTY &trans
                             &kp LPAR   &kp RPAR   &kp UNDERSCORE        &trans      &trans          &trans
            >;
        };

        function {
// ------------------------------------------------------------------------------------------
// |     |  F12 |  F7  |  F8  |  F9   | PSCRN | # |     |       |       |      |      |     |
// |     |  F11 |  F4  |  F5  |  F6   | SLCK  | # |     | LSHFT | LCTRL | LALT | LGUI |     |
// |     |  F10 |  F1  |  F2  |  F3   | PAUSE | # |     |       |       | RALT |      |     |
//                     | ESC  | TAB   | SPACE | # |     |       | HELD  |

            label = "Func";
            bindings = <
&trans  &kp F12  &kp F7  &kp F8   &kp F9     &kp PSCRN              &trans  &trans     &trans     &trans    &trans     &trans
&trans  &kp F11  &kp F4  &kp F5   &kp F6     &kp SLCK               &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI   &trans
&trans  &kp F10  &kp F1  &kp F2   &kp F3     &kp PAUSE_BREAK        &trans  &trans     &trans     &kp RALT  &to QWERTY &trans
                         &kp ESC  &kp TAB    &kp SPACE              &trans  &trans     &trans
            >;
        };
    };
};
